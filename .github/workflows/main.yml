name: Combined Deployment and IPFS Save
on:
  push:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and package WAR file
        run: |
          jar cvf borisp2.war *
        # No need for working-directory if source code is in the root

      - name: Copy file to AWS server via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          source: "borisp2.war"
          target: "/opt/tomcat/webapps"

  SaveToIPFS:
    needs: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and package WAR file
        run: |
          jar cvf fichier.war *
        # No need for working-directory if source code is in the root

      - name: Set up Alpine for IPFS
        uses: jirutka/setup-alpine@v1
        with:
          branch: v3.15

      - name: Install and start IPFS
        run: |
          apk add go-ipfs
          ipfs init
          ipfs daemon &
        shell: alpine.sh --root {0}

      - name: Save file to IPFS
        run: |
          ls -la 
          ipfs swarm peers
          ipfs add fichier.war
        shell: alpine.sh --root {0}
  DumpSql:
    needs: [Deploy,SaveToIPFS]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup SSH Keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.HOST_DNS }} >> ~/.ssh/known_hosts
      
      - name: Create SSH Tunnel
        run: |
          ssh -i ~/.ssh/id_rsa -L 3307:127.0.0.1:3306 admin@${{ secrets.HOST_DNS }} -N &
          SSH_TUNNEL_PID=$!
          sleep 10
          if ps -p $SSH_TUNNEL_PID > /dev/null; then
            echo "SSH tunnel established, PID: $SSH_TUNNEL_PID"
          else
            echo "SSH tunnel failed"
            exit 1    
          fi
      
      - name: Dump MySQL Database
        env:
          MYSQL_PWD: ${{ secrets.MYSQLDUMP_PASSWORD }}
        run: |
          mysqldump -ucnam -h127.0.0.1 -P3307 --password="${MYSQL_PWD}" films > sauvegarde_films.sql
          if [ $? -ne 0 ]; then
            echo "Failed to dump MySQL"
            exit 1
          fi
      
      - name: Kill SSH Tunnel
        if: always()
        run: |
          kill $SSH_TUNNEL_PID || echo "SSH tunnel fin."
      
      - name: Install IPFS
        run: |
          wget https://dist.ipfs.io/go-ipfs/v0.9.1/go-ipfs_v0.9.1_linux-amd64.tar.gz
          tar xvfz go-ipfs_v0.9.1_linux-amd64.tar.gz
          cd go-ipfs
          sudo bash install.sh
          ipfs init
      
      - name: Add to IPFS
        run: |
          ipfs daemon --init &
          sleep 10
          ipfs add sauvegarde_films.sql
